<!--
============================================================================================== 
PAGE FOR CREATING / EDITING A NOTICE
REQUIRES THE ID OF A NOTICE (UNLESS CREATING A NEW RECORD), I.E:

    [SF base URL]/Apex/[VF Page Name]?Id=[Notice id]
    
Add parameter "ShowNBSettings" to make diagnostics (normally hidden fields) visible    

ProvenWorks for Improved Apps
Copyright (c.) Improved Apps Limited 2012. All Rights Reserved.
==============================================================================================
-->


<apex:page standardController="ianb__Notice__c" extensions="ianb.ControllerExtensionNoticeEdit" 
        showHeader="true" sidebar="true" tabStyle="ianb__Notice__c"
        title="{!BrandingLocalisations['ProductName']}: {!DialogueLocalisations['TitleDialogueTitle']}">

    <apex:stylesheet value="{!URLFOR($Resource.ianb__noticeboard_resources, 'noticeboard_resources/css/tabpanel.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.ianb__noticeboard_resources, 'noticeboard_resources/css/recipientview.css')}"/>

    <style>
        body .rich-tabpanel-content 	{padding: 0 0 0 0; background-color: transparent; color: inherit; font-family: inherit; font-size: inherit; border: none;}
        .bPageTitle .ptBody .content 	{width: 95%;}
        body .individualPalette .secondaryPalette.bPageBlock.bDetailBlock {border-top: 3px #FC4F59 solid;}
        .lookupInput 					{vertical-align: top;}
        .NBWarning 						{color: red; font-weight: bold;}        
		.UpdatesPending * {color: #FC4F59;}
		.UpdatesPendingWarning {color: #FC4F59; font-size: 1.2em; font-weight: bold; padding: 5px 15px 5px 0;}
    </style>
    
    <apex:includeScript value="{!URLFOR($Resource.ianb__noticeboard_resources, 'noticeboard_resources/js/jquery-1.5.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ianb__noticeboard_resources, 'noticeboard_resources/js/jquery.blockUI.js')}"/> 


<!--   
===============================================
RECORD / NOTICE TITLE AREA AND WARNINGS
===============================================
 -->            
    <table width="100%">
        <tr>
            <td><apex:sectionHeader subtitle="{!Title}" title="{!BrandingLocalisations['NoticeObjectName']}"></apex:sectionHeader></td>
            <td rowspan="2" style="vertical-align: middle;text-align: right;width:50px;"><apex:image style="max-width:172px;" height="100px" value="{!ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c}" rendered="{!AND(NOT(ISNULL(ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c)), NOT(BEGINS(ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c, 'javascript:')))}" /></td>
        </tr>
        <tr>
            <td>
                <div id='divWarning' style="display: none;" class="message warningM3">
                    <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
                        <tr valign="top">
                            <td><img alt="WARNING" class="msgIcon" src="/s.gif" title="WARNING" /></td>
                            <td class="messageCell">
                                <div class="messageText">
									<h4>{!GlobalLocalisations['AdviceLabelWarning']}</h4>
									{!DialogueLocalisations['AdviceLabelWarningSaveRecipients']}<br />
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
                <apex:pageMessages id="pbMessages" />
            </td>
        </tr>
    </table>

    <script type="text/javascript">

        var jQ = $.noConflict(true);

       	var sDelim1 = String.fromCharCode(7);		// Non printable character for use in delimited data (was ,)
       	var sDelim2 = String.fromCharCode(5);		// Non printable character for use in delimited data (was ;)
       	var sDelim3 = String.fromCharCode(6);		// Non printable character for use in delimited data
       	var showDiags = '{!showDiagnostics}';		// Controls appearence of certain diagnostics messages
        var mode;									// Recipient selectin mode ("User" for individuals, or "List")
        var recs = {};  							//
        var updRecs = [];							//
        

///////////////////////////////////////////////////////
// Initialisation
///////////////////////////////////////////////////////

        jQ(document).ready(function() {
            // Set recipient selection mode radio from Notice's stated mode
            mode = jQ('input[id*="hdnSelectMode"]').val();
            if (mode == 'User') jQ('#inpUser').attr('checked', 'checked');
            else jQ('#inpList').attr('checked', 'checked');
            
            // Populate step 2 listing
            setUsersOptions();
            
            // Populate step 3 listing
            if (mode == 'User') {
	            populateRecipientsList();
            } else {
            	populateListsList();
            }
            
            
            updateRecipientsCount();
            updateSelectedCount();
            
                        
            // Enable / disable user search button as required
            handleValueChanged(jQ('input[id*="txtSearchString"]'), function() {
                enableButton(jQ('input[id*="btnSearch"]'), jQ('input[id*="txtSearchString"]').val());
            });
            
        });

///////////////////////////////////////////////////////
// UI logic & manipulation
///////////////////////////////////////////////////////

		// Enable / Disable buttons
        function enableButton(btn, isEnabled) {
            if (!isEnabled) {
                jQ(btn).removeClass('btn');
                jQ(btn).addClass('btnDisabled');
                jQ(btn).attr('disabled', 'disabled');
            } else {
                jQ(btn).removeClass('btnDisabled');
                jQ(btn).addClass('btn');
                jQ(btn).removeAttr('disabled');
            }
        }


		// Clear selections in listing control specified by ID
        function removeSelection(id) {
            jQ('select[id*="'+ id +'"] option:selected').each(function() {
                jQ(this).removeAttr('selected');
            });
        }


		//
        function tab_ontabenter(tabName) {      
            var expire = new Date();
            expire.setTime(expire.getTime() + 60000*20);
            setCookie('apex__ActiveTab', tabName, expire);
        }
        
        
		//
        function onLeaveRecipientsTab() {
            if (jQ('#hidChanged').val() == 'true') {
                jQ('#divWarning').show();
            }
            return true;
        }
        
        
        // Lightbox UI for lengthy ops
        function blockUI(id, style) {
            if (!style) {
             style = {
                    borderWidth: 2,
                    borderColor: '#EF2B2D',
                    backgroundColor: '#F3F3EC',
                    cursor: 'default',
                    padding: '9px',
                    width: '354px'
                }
            }
            var dlg = jQ('#' + id);
             jQ.blockUI({
                message: dlg,
                fadeIn: 0,
                fadeOut: 0,
                css: style                  
            });
        }
        
        
        // Remove UI lighbox on ops completion
        function unblockUI() {
            jQ.unblockUI({
                fadeIn: 0,
                fadeOut: 0
            });            
        }
        
        
        // Show operations progress bar
        function updateProgress(currentStep, totalSteps) {
            var width = currentStep * (350 / totalSteps);
            document.getElementById('progressBar').style.width = width + 'px';
        }


		// 
        function stopDisplayUsers() {
            jQ('div[id*="divStart"]').hide();
            jQ('div[id*="divStop"]').show();
            setUsersOptions();
            updateSelectedCount();
            
            // If in "List" mode, adjust search tool label dependent on step 1 selected artifact
            if (mode == 'List') {
                var source = jQ('select[id*="slSource"]').val();
                if (source == '1') {
					jQ('label[id*="lblSearch"]').text('{!JSENCODE(DialogueLocalisations['AdviceLabelSearchGeneral'])} Profile:');
                 } else if (source == '2' || source == '4') {
					jQ('label[id*="lblSearch"]').text('{!JSENCODE(DialogueLocalisations['AdviceLabelSearchGeneral'])} Role:');
                 } else if (source == '3') {
					jQ('label[id*="lblSearch"]').text('{!JSENCODE(DialogueLocalisations['AdviceLabelSearchGeneral'])} Group:');
                 } else if (source == '6') {
					jQ('label[id*="lblSearch"]').text('{!JSENCODE(DialogueLocalisations['AdviceLabelSearchGeneral'])} Recipient Group:');
                 }
            }
            
            preventStep3Overload();
        }
        

        // Only allow Recipient Group saving if a name has been entered
        function validateRGName(elem) {
        
        	var btn = document.getElementById('{!$Component.frmSelectRecipients.pbSaveGroup.blkbtnsSave.btnSaveRG}');        	

			if (elem.value.length > 0) {
				enableButton(btn, true);
			} else {
				enableButton(btn, false);
			}
        }

        
///////////////////////////////////////////////////////
// Search support functions 
///////////////////////////////////////////////////////

		//
        function startSearchUser() {
            jQ('div[id*="divStop"]').hide();
            jQ('div[id*="divStart"]').show();
            searchUserAction();
        }
    	
    	
    	//
        function resetSearch() {
            jQ('div[id*="divStop"]').hide();
            jQ('div[id*="divStart"]').show();
            jQ('input[id*="txtSearchString"]').val('');
            searchUserAction();
        }
        
        
        //
        function handleValueChanged(input, handler) {
            input.data('ianb.search.value', input.val());
            // time-out is needed to get actual values of input on key down event
            window.setInterval(function() {
                var value = input.data('ianb.search.value');
                if (value != input.val()) {
                    input.data('ianb.search.value', input.val());
                    handler();
                }
            }, 50); 
        }

///////////////////////////////////////////////////////
// Recipient count support functions 
///////////////////////////////////////////////////////

		// Track number of recipients implied by current selections in Step 2 listing
		// and prevent addition of recipients to step 3 where limits would be exceeded
        function updateSelectedCount() {
            var options  = jQ('select[id*="slAllUsers"] option:selected');		// Selection in step 2
            var res = getUsersNumberFromOptions(options);
            var len = res.count;
            
            // Set label showing number of selected recipients
			jQ('#lblSelectedCount').text(len + ' {!JSENCODE(DialogueLocalisations['AdviceLabelNumberSelected'])}');
            
            if (len) {
                jQ('#lblSelectedCount').css('background-color', '#FFE324');
            }
            else {
                jQ('#lblSelectedCount').css('background-color', 'transparent');
            }
            
        }
        
        
    	// Track number of recipients implied by items added to Step 3 listing
        function updateRecipientsCount() {          
            var options = jQ('#slRecipients option');
            var res = getUsersNumberFromOptions(options);
            var count = res.count;
            var extCount = res.extCount;
            
            // Set labels with total number of recipients plus number of external ones...        
			jQ('#lblRecipientsCount').text(count + ' {!JSENCODE(DialogueLocalisations['AdviceLabelNumberTotal'])}');
			jQ('#lblExternalUsersCount').text(extCount + ' {!JSENCODE(DialogueLocalisations['AdviceLabelNumberExternal'])}');
            
            if (count) {
                jQ('#lblRecipientsCount').css('background-color', '#FFE324');
            } else {
                jQ('#lblRecipientsCount').css('background-color', 'transparent');
            }
            
            if (extCount) {
                jQ('#lblExternalUsersCount').css('background-color', '#FC4F59');
            } else {
                jQ('#lblExternalUsersCount').css('background-color', 'transparent');
            }
            
            preventStep3Overload();
        }


        // Prevent addition of recipients to step 3 where limits would be exceeded:
        // Disable add recipients button and display warning
        function preventStep3Overload() {
            var step2  = jQ('select[id*="slAllUsers"] option:selected').size();		// Selection in step 2
            var step3 = jQ('#slRecipients option').size();							// All step 3 options
            var maxStep3Recipients = {!maxStep3Recipients};

            // If selection at step 2 + already selected recipients in step 3
            // exceeds total allowed in step 3, disable the "Add" button and show a warning            
            if (step2 + step3 > maxStep3Recipients) {
            	jQ('#maxStep3Warning').css('display', 'block');
					enableButton(jQ('input[id*="btnAddUsers"]'), false);
					
					// If disabling here, no need to go further (indeed we should not)
					return;
            } else {
            	jQ('#maxStep3Warning').css('display', 'none');
				enableButton(jQ('input[id*="btnAddUsers"]'), true);
            }            
            
            // If step 3 already at limits, show warning
            if (step3 >= maxStep3Recipients) {
            	jQ('#maxStep3Reached').css('display', 'block');
				enableButton(jQ('input[id*="btnAddUsers"]'), false);
            } else {
            	jQ('#maxStep3Reached').css('display', 'none');
				enableButton(jQ('input[id*="btnAddUsers"]'), true);
            }                        
        }


        // Read "data" stored against recipient HTML option tags (i.e., step 3 selected recipient entries)
        // and total the numbers of users each selection represents
          
        function getUsersNumberFromOptions(options) {
            var used = {};
            var count = 0;
            var extCount = 0;
            options.each(function() {
                var list = jQ(this).data('list');
                if (list) {
                    for (var id in list.users) {                    
                        
                        // If we haven't encountered this option previously..
                        if (!used[id]) {
                        
                        	// Means of counting varies by recipient selection mode:
                        	// To be more precise, by whether the recipient info in the option
                        	// was produced on page load from a saved List-mode recipient group definition 
                        	// (in which case it will have an ID pre-pended with "ListMode") 
                        	// or has been populated by the UI since the page was loaded:
                        	
							if (id.indexOf('ListMode') == 0) {
									
								// If in list mode and if we find a suitably-marked JSON data record,
								// take our total and external user numbers from the data:
								// see populateListsList for JSON format:
								
								var nums = id.split('_');									
								count += nums[1] /1;		// Force JSON string back to number
								extCount += nums[2] /1;		// Force JSON string back to number

                        	} else {
                        		// In individual mode, each option represents an individual recipient...
	                            count++;
	                            
	                            // ...and if ID is pre-pended with "portal_", they're external...
	                            if (id.indexOf('portal_') == 0) {
	                                extCount++;
	                            }
                        	}
                        	
                            used[id] = 1;
                        }
                    }

                } else {
                    var userId = jQ(this).val();
                    count++;
                    if (userId.indexOf('portal_') == 0) {
                        extCount++;
                    }
                }
            });
            return { 'count' : count, 'extCount' : extCount };
        }

///////////////////////////////////////////////////////
// Selection Step lists population & logic
///////////////////////////////////////////////////////

		// Respond to change in Step 1 / Recipient List selection drop down
        function startDisplayGroups() {
            jQ('div[id*="divStop"]').hide();
            jQ('div[id*="divStart"]').show();           
            updateGroupListAction();
        }


        // Handle Step 1 list option selection
        function startDisplayUsers() {
            jQ('div[id*="divStop"]').hide();
            jQ('div[id*="divStart"]').show();
            updateUserListAction();
        }


        // Handle recipient mode selection radio button
        function selectMode_click(newMode) {
            if (newMode == 'List') {
                var options = jQ('#slRecipients option');
                if (options.length) {
					if (!confirm('{!JSENCODE(DialogueLocalisations['MessageConfirmSwitchToListMode'])}')) {
                        jQ('#inpUser').attr('checked', 'checked');
                        return false;
                    }
                    options.each(function() {
                        updRecs.push(jQ(this).val());
                    });
    
                    options.remove();
                    jQ('#hidChanged').val('true');
            
                    updateRecipientsCount();
                    recs = {};
                }
                listRecs.added = {};
                listRecs.updRecs = [];
                jQ('#inpList').attr('checked', 'checked');
                   
            } else {
                listRecs.added = {};
                listRecs.updRecs = [];      
                fillListRecsFromLists();
                if (listRecs.updRecs.length > 500) {
                
                	// Warn user about limits to recipient selection numbers in individual mode                	
					alert('{!JSENCODE(DialogueLocalisations['MessageIndividualRecipientLimitWarning'])}');
                    jQ('#inpList').attr('checked', 'checked');
                    return false;
                                        
                } else {
						if (!confirm('{!JSENCODE(DialogueLocalisations['MessageConfirmSwitchToIndividualMode'])}')) {
                        jQ('#inpList').attr('checked', 'checked');
                        return false;
                    }
                    
                    jQ('#slRecipients option').remove();

                    recs = {};
                                        
                    removeSelection('slRecipients');
                    updateSelectedCount();
            
                    updateRecipientsCount();
                    jQ('#inpUser').attr('checked', 'checked');
					jQ('label[id*="lblSearch"]').text('{!JSENCODE(DialogueLocalisations['AdviceLabelSearchGeneral'])} User:');
                }
            }
            jQ('input[id*="hdnSelectMode"]').val(newMode);
            
            changeSelectMode();
            mode = newMode;
            if (mode == 'List' && jQ('select[id*="slSource"]').val() == '7') {
                 jQ('select[id*="slSource"]').val('1');
                 startDisplayGroups();
            } else if (mode == 'List' && jQ('select[id*="slSource"]').val() == '5') {
                 jQ('select[id*="slSource"]').val('1');
                 resetSearch();

            } else startDisplayUsers();

			preventStep3Overload();
            return true;
        }
    	
    	
    	// Populate Step 2 listing from hidden listing options data
        function setUsersOptions() {
            var optionsData = jQ.parseJSON(jQ('input[id*="hdnUsersOptions"]').val());
            jQ('#slAllUsers option').remove();
            var options = [];
            for (id in optionsData) {
                var data = optionsData[id];
                var newOpt;
                if (data.type) {
                    newOpt = jQ('<option selected="selected" value="' + id + '">' + data.label + '</option>');
                    newOpt.data('list', data);
                } else {
                    newOpt = jQ('<option selected="selected" value="' + id + '">' + data + '</option>');
                }
                options.push(newOpt[0]);
            }
    
            if (options.length) {
                jQ('#slAllUsers').append(options);
            }       
        }


		// Respond to Step 2 change 
        function slAllUsersChange() {
            var isSearch = (jQ('select[id*="slSource"]').val() == "5");
            if (isSearch) {
                var selectedUser = jQ('#slAllUsers option:selected:first').val();
    
                if (selectedUser) {
                    jQ('input[id*="hdnSelectedUser"]').val(selectedUser);
                    fillUserGroupsAction();
                }   
            }
            
            preventStep3Overload();
        }


        // Populate Step 3 recipients listing when in USER mode from hidden text field info:
        // This will contain entries in the form: 
        // {"user id":"user full name", [...]}
        
        function populateRecipientsList() {
            var enc = decodeHTML(jQ('#hdnAllRec').val());
            recs = jQ.parseJSON(enc);
            var recipients = jQ('#slRecipients');
            var options = [];
            for (var id in recs) {
                options.push('<option value="' + id + '">' + encodeHTML(recs[id]) + '</option>');           
            }
            recipients.append(jQ(options.join('')));
        }


		// Populate Step 3 recipients listing when in LIST mode with details from (Notice's previously saved) Recipient List Definition
		function populateListsList() {
			
			// Get the recipient list definition and split it into "clauses"
			var RList = '{!JSENCODE(Notice__c.RecipientListDefinition__c)}';

			RList = RList.split(sDelim2);
			
		    var recipients = jQ('#slRecipients');	// The step 3 recipients list
		    var options = [];
		    var i, opt, val, txt, newOpt;
		    
		    // Loop around definition clauses
		    for (i=0; i<RList.length; i++) {
		    
		    	// Split each clause into parts: grouping id [delimiter] grouping name [delimiter] type
		    	opt = RList[i].split(sDelim1);
		    	val = opt[0];
		    	
		    	// NB: no need to encode HTML here
				txt = opt[1].split('"').join('');
		    	
		    	// Create an HTML SELECT OPTION for each clause
				// We don't want to show recipient numbers in options, as at 1.8: 
				// Constructor will have left these at all zeros, so don't show them...
				newOpt = jQ('<option value="' + opt[0] + '">' + txt.substring(0, txt.indexOf(sDelim3)) + '</option>');       

		
			    // Pack each option with "data" in a format expected elsewhere on this page: Name AND Type (e.g., Profile)
			    // Also, we'll use the "users" JSON field (used elsewhere to hold individual recipient IDs and names) to
			    // send total / external recipient numbers: these are in the grouping name clause, which
			    // will have the form (set in our controller's constructor):
			    //
			    // 		Grouping Name [Delimiter 3](total users:external users)
			    //
				// Having retrieved receipient numbers, pack these into JSON in the expected format: 
				// Overall list "data" element is expected in the form:
				//
				// 		{name: grouping/option name, type: grouping type, users:{"ID":"Name"[,"ID":"Name"}}
				//
				// We pre-pend the user ID JSON field with "ListMode" so recipient counting routines can spot it...
				// Example of use in our case:
				//
				//		{name:Customer Partner Profile,type:Profile,users:{"ListMode[profile's id]_T_E":"ListMode"}}
				//
				// ... where T = total users and E = external users 
				
				var theNumbers = opt[1].split(sDelim3);
				theNumbers = theNumbers[1].split('"').join('').split('(').join('').split(')').join('').split(':');
				var LMode = jQ.parseJSON('{"ListMode' + opt[0] + '_' + theNumbers[0] + '_' + theNumbers[1] + '":"ListMode"}');
				newOpt.data('list', {name: txt, type: opt[2], users:LMode});
		        
		        options.push(newOpt[0]);
		        recs[val] = txt;
		    }
		    
			// Tack retrieved options onto step 3 list
		    if (options.length) {
		        recipients.prepend(options);
		    }
		    
		}


		// Handle Add button, sending a selection to Step 3
        function addUsers() {
            var selOptions = jQ('select[id*="slAllUsers"] option:selected');
            var recipients = jQ('#slRecipients');
            var options = [];
            selOptions.each(function() {
                var opt = jQ(this);
                if (!recs[opt.val()]) {
                    var newOpt = jQ('<option value="' + opt.val() + '">' + encodeHTML(opt.text()) + '</option>');
                    if (mode == 'List') {
                        newOpt.data('list', opt.data('list'));
                    } else {
                        updRecs.push(opt.val());
                    }
                    options.push(newOpt[0]);
                    recs[opt.val()] = opt.text();
                }
            });
            if (options.length) {
                recipients.prepend(options);
                jQ('#hidChanged').val('true');
            }
            
            removeSelection('slAllUsers');
            removeSelection('slRecipients');
            updateSelectedCount();
            updateRecipientsCount();
        }
    
    	
    	// Handle Remove button, removing a selection from Step 3
        function removeUsers() {
            var selOptions = jQ('#slRecipients option:selected');
            
            selOptions.each(function() {
                var opt = jQ(this);
                if (mode == 'User') {
                    updRecs.push(opt.val());
                }
                delete recs[opt.val()];     
            });
            
            if (selOptions.length) {
                selOptions.remove();
                jQ('#hidChanged').val('true');
            } 
    
            updateRecipientsCount();
        }
        

		// If an existing RG is selected on the "save recipient group" area, set RG name field to selected RG
        function RecipientGroupsSelect() {
            jQ('input[id*="txtGroupName"]').val(jQ('select[id*="slRecipientGroups"]').val());
        }


///////////////////////////////////////////////////////
// Recipient record data manipulation
///////////////////////////////////////////////////////

		//
        var listRecs = { added : {}, updRecs : [],
            add : function(id, name) {
                if (!this.added[id]) {
                    this.added[id] = name;
                    this.updRecs.push(id);
                }
            }
        };
        
        
        // Parse "updRecs" into hidden updated recipients list field
        function updateRecs() {
            var res = [];
            var used = {};
            for (var i = 0; i < updRecs.length; i++) {
                var userId = updRecs[i];
                if (userId.indexOf('portal_') == 0) {
                    userId = userId.replace('portal_', '');
                }
                if (userId in used) {
                    delete used[userId];
                } else {
                    used[userId] = true;
                }
            }
            for (var id in used) {
                res.push(id);
            }
            if (res.length) {
                jQ('input[id*="hdnUpdateRecipientList"]').val(res.join(';'));
            }
        }
        
        
        // Parse data from Step 3 selected recipient list into "listRecs" 
        function fillListRecsFromLists() {
            var options = jQ('#slRecipients option');       
                        
            options.each(function() {
                var list = jQ(this).data('list');
                if (list) {
                    for (var id in list.users) {
                        if (id.indexOf('portal_') == 0) {
                            id = id.replace('portal_', '');
                        }
                        listRecs.add(id, list.users[id]); 
                    }
                }
            });
        }
        
        
        // Handle Save Recipients button
        function saveRecipients() {        	
        	
        	try {
	        	// Don't show progress bar if diagnostics requested
				if (showDiags != 'true') {
					// This call can fail in some browsers
					try {
						blockUI('dlgProgress');
					} catch (ex) {}
				}
	
	
				// ML: Don't record individual recipients when in list mode            
				/*
				if (mode == 'List') {
				    fillListRecsFromLists();
				    updRecs = updRecs.concat(listRecs.updRecs);
				}
				*/
	            
	            // recipients members data
	            // ML: Replaced delimiter in use between reciient group member data elements: comma
	            // will cause issues if this character is present within (e.g.,) a group name - so use
	            // an unprintable character instead...
	            
	            var members = '';
	            var options = jQ('#slRecipients option');
				var scope = jQ('select[id*="slScope"]').val();
	            options.each(function() {
	                if (members) members += sDelim2;
	                
	                var list = jQ(this).data('list');
	                if (list) {
	                    var start = jQ(this).text().lastIndexOf('(') - 1;
	                    var listName = list.name;
	                    
						members += jQ(this).val() + sDelim1 + '"' + listName + '"' + sDelim1 + list.type + sDelim1 + scope;
	                    
	                } else {
	                    var id = jQ(this).val();
	                    if (id.indexOf('portal_') == 0) {
	                        id = id.replace('portal_', '');
	                    }
	                    
						members += id + sDelim1 + '"' + jQ(this).text() + '"' + sDelim1 + 'User' + sDelim1 + scope;	                    
	                }           
	            });
	            jQ('input[id*="hdnRecipientGroupMembers"]').val(members);
	            
	            updateRecs();
	            
	            // If diagnostics requested, make actual save / server call optional
	            if (showDiags == 'true') {
	            	if (!confirm('Continue to save?')) {return;}
	            }
				setTimeout(function() { saveRecipientsAction(); }, 200);

        	} catch (e) {
	            // If diagnostics requested, offer additional error info
        		if (showDiags == 'true') {alert('saveRecipients - error: ' + e);}
        	}
        	
        }
        
        
        // 
        function saveGroup() {
            saveGroupAction();
        }
        

///////////////////////////////////////////////////////
// Utilities
///////////////////////////////////////////////////////

		// Cookie manipulation - for Notice specific values
        function setCookie(name, value, expires) {
            document.cookie = name + "={!Notice__c}_" + escape(value) +
           ((expires) ? "; expires=" + expires : "") +
           "; path=/";
        }
        
        // Cookie manipulation - for cross-Notice values
        function setCookiePlain(name, value, expires) {
            document.cookie = name + "=" + escape(value) +
           ((expires) ? "; expires=" + expires : "") +
           "; path=/";
        }

		//
        function decodeHTML(str) {
            return str.replace(/&lt\;/g, '<').replace(/&gt\;/g, '>').replace(/&quot\;/g,'"').replace(/&#39\;/g, "'").replace(/&#x2F\;/g, '/').replace(/&amp\;/g, "&");
        }
        
        
		//
        function encodeHTML(str) {
            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/\//g, '&#x2F;');
        }

        
    </script>


<!--   
===============================================
SAVE PROGRESS BAR
===============================================
 -->            

    <div id="dlgProgress" style="text-align:center;display:none;">
        <div id="progressDiv" style="border:solid 1px #000000;padding:1px;width:350px;background-color:#F3F3EC;text-align:left;">
            <span id="progressBar" style="background-color:#EF2B2D;width:0px;height:50px;overflow:hidden;display:inline-block;"></span>
        </div>
        <div id="installingDiv" style="width:350px;">{!GlobalLocalisations['MessageSaving']}</div>
    </div>


<!--   
===============================================
NOTICE DEFINITION TAB
===============================================
 -->            
    <apex:tabPanel switchType="client" id="AccountTabPanel" tabClass="activeTab" inactiveTabClass="inactiveTab" value="{!ActiveTab}">       
    
        <apex:tab label="{!DialogueLocalisations['TitleSubtitleTabNoticeDefinition']}" name="DraftNotice" id="tabDraftNotice" ontabenter="tab_ontabenter('DraftNotice');">
            <apex:form >
                <apex:inputHidden id="hidQueryString" value="{!QueryStringValue}" />        
				
				<apex:pageBlock title="{!DialogueLocalisations['TitleSubtitleNoticeDefinition']}" mode="maindetail">

                    <apex:pageBlockButtons location="top" >
                        <apex:commandButton value="{!GlobalLocalisations['ButtonSave']}" action="{!SaveNotice}" rendered="{!NOT(ISNew)}"/>
						<apex:commandButton value="{!GlobalLocalisations['ButtonContinue']}" action="{!SaveNotice}" rendered="{!ISNew}"/>
                        <apex:commandButton value="{!GlobalLocalisations['ButtonCancel']}" action="{!cancel}" immediate="true" />
                    </apex:pageBlockButtons> 

                    <apex:pageBlockSection columns="1" collapsible="false" showHeader="false">
						<apex:outputText >{!DialogueLocalisations['AdviceLabelNoticeDefTabPurpose']}</apex:outputText>
                    </apex:pageBlockSection> 
                     
                    <apex:outputPanel layout="block" rendered="{!ISNew}">
                        <apex:pageBlockSection columns="1" collapsible="false" showHeader="false">
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelNoticeBoard']}" value="{!ianb__Notice__c.ianb__NoticeBoard__c}" required="true" />
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelTitle']}" value="{!ianb__Notice__c.ianb__Title__c}" required="true"/>
                        </apex:pageBlockSection>
                    </apex:outputPanel>
                    
                    <apex:outputPanel layout="block" rendered="{!NOT(ISNew)}">                     
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleAnnouncement']}" columns="2" collapsible="false">
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelNoticeBoard']}" value="{!ianb__Notice__c.ianb__NoticeBoard__c}" required="true" />
                            <apex:pageBlockSectionItem >

							<apex:outputLabel value="{!DialogueLocalisations['FieldLabelThemeImagePreview']}" for="imgThemeImage" />
                                <apex:image id="imgThemeImage" value="{!ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c}" rendered="{!AND(NOT(ISNULL(ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c)), NOT(BEGINS(ianb__Notice__c.NoticeBoard__r.ianb__ThemeImageUrl__c, 'javascript:')))}" style="max-width:172px;" height="100"/>
                            </apex:pageBlockSectionItem>

                            <apex:inputField label="{!DialogueLocalisations['FieldLabelTitle']}" value="{!ianb__Notice__c.ianb__Title__c}" required="true"/>
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelSignatory']}" value="{!ianb__Notice__c.ianb__Signatory__c}"/> 
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelSummary']}" value="{!ianb__Notice__c.ianb__Summary__c}"/>

							<apex:selectList label="{!DialogueLocalisations['FieldLabelCustomStyle']}" value="{!ianb__Notice__c.ianb__CustomStyle__c}" multiselect="false" size="1" >
							    <apex:selectOptions value="{!CustomStyles}"/>
							</apex:selectList>           

                        </apex:pageBlockSection>        
                    </apex:outputPanel>
                    
                    <apex:outputPanel id="outPersonal" layout="block" rendered="{!NOT(ISNew)}">
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitlePersonalisation']}" columns="2" collapsible="false">
							<apex:inputField label="{!DialogueLocalisations['FieldLabelSalutation']}" value="{!ianb__Notice__c.ianb__Salutation__c}">
                                <apex:actionSupport event="onchange" rerender="outPersonal,pbMessages" />
                            </apex:inputField>
                              
							<apex:inputField label="{!DialogueLocalisations['FieldLabelSalutationOther']}" value="{!ianb__Notice__c.ianb__Salutation_Other__c}" rendered="{!ianb__Notice__c.ianb__Salutation__c=='Other'}" />
                        </apex:pageBlockSection>        
                    </apex:outputPanel>
                    
                    <!-- need to wrap outputPanel around both blocks in order for onchange to fire correctly -->
                    <apex:outputPanel id="outVote" layout="block" >
	                    <apex:outputPanel layout="block" rendered="{!NOT(ISNew)}">
							<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleAction']}" columns="2" collapsible="false">
								<apex:inputField label="{!DialogueLocalisations['FieldLabelRequiredAction']}" value="{!ianb__Notice__c.ianb__RequiredAction__c}" >
	                                <apex:actionSupport event="onchange" rerender="outVote,pbMessages" />
	                            </apex:inputField>
	                            
	                            <apex:inputField label="{!DialogueLocalisations['FieldLabelRequiredActionDeadline']}" value="{!ianb__Notice__c.ianb__RequiredActionDeadline__c}"/>
	                            <apex:inputField label="{!DialogueLocalisations['FieldLabelBannerActionMessage']}" value="{!ianb__Notice__c.ianb__BannerActionMessage__c}" />
	                        </apex:pageBlockSection>        
	                    </apex:outputPanel>

	                    <apex:outputPanel layout="block" rendered="{!AND(ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge',NOT(ISNew))}">
							<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleResponse']}" columns="2" collapsible="false">
	                            <apex:inputField label="{!DialogueLocalisations['FieldLabelNotificationResponseOption']}" value="{!ianb__Notice__c.ianb__NotificationResponseOption__c}" rendered="{!ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge'}" >
	                                 <apex:actionSupport event="onchange" rerender="outVote,pbMessages" />
	                            </apex:inputField>
	                            
	                            <apex:inputField label="{!DialogueLocalisations['FieldLabelAcknowledgementStatement']}" value="{!ianb__Notice__c.ianb__AcknowledgementStatement__c}" rendered="{!ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge'}"/>
								<apex:inputField label="{!DialogueLocalisations['FieldLabelVoteChoices']}" value="{!ianb__Notice__c.ianb__VoteChoices__c}" id="inpVoteChoices" style="width:275px;" rendered="{!AND(ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge',ianb__Notice__c.ianb__NotificationResponseOption__c=='Vote')}" />
	                            <apex:outputText rendered="{!NOT(AND(ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge',ianb__Notice__c.ianb__NotificationResponseOption__c=='Vote'))}" />
								<apex:inputField label="{!DialogueLocalisations['FieldLabelAllowComment']}" value="{!ianb__Notice__c.ianb__AllowComment__c}" rendered="{!ianb__Notice__c.ianb__RequiredAction__c=='Read and Acknowledge'}" />
	                        </apex:pageBlockSection> 
	                    </apex:outputPanel>       
                    </apex:outputPanel>
                    
                    <apex:outputPanel layout="block" rendered="{!NOT(ISNew)}">
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleApproval']}" columns="2" collapsible="false">
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelApprovalRequired']}" value="{!ianb__Notice__c.ianb__ApprovalRequired__c}"/>
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelNoticeApprover']}" value="{!ianb__Notice__c.ianb__NoticeApprover__c}"/> 
                        </apex:pageBlockSection>        
                    </apex:outputPanel>
                    
                    <apex:outputPanel id="outScheduling" layout="block" rendered="{!NOT(ISNew)}">
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleScheduling']}" columns="2" collapsible="false">
							<apex:inputField label="{!DialogueLocalisations['FieldLabelPublicationOption']}" value="{!ianb__Notice__c.ianb__PublicationOption__c}" required="true" >
                                <apex:actionSupport event="onchange" rerender="outScheduling,pbMessages" />
                            </apex:inputField>    

							<apex:inputField label="{!DialogueLocalisations['FieldLabelSuspensionOption']}" value="{!ianb__Notice__c.ianb__SuspensionOption__c}" required="true" >           
                                <apex:actionSupport event="onchange" rerender="outScheduling,pbMessages" />
                            </apex:inputField>    

                            <apex:inputField label="{!DialogueLocalisations['FieldLabelAutoPublishDate']}" value="{!ianb__Notice__c.ianb__AutoPublishDate__c}" rendered="{!ianb__Notice__c.ianb__PublicationOption__c=='Scheduled'}" />
                            <apex:outputText rendered="{!AND(ianb__Notice__c.ianb__PublicationOption__c!='Scheduled',ianb__Notice__c.ianb__SuspensionOption__c=='Scheduled')}" />
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelAutoSuspendDate']}" value="{!ianb__Notice__c.ianb__AutoSuspendDate__c}" rendered="{!ianb__Notice__c.ianb__SuspensionOption__c=='Scheduled'}"/>
                        </apex:pageBlockSection>
                    </apex:outputPanel>

                    <apex:outputPanel layout="block" rendered="{!NOT(ISNew)}">
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleContent']}" columns="1" collapsible="false">
                            <apex:inputField label="{!DialogueLocalisations['FieldLabelDetail']}" value="{!ianb__Notice__c.ianb__Detail__c}" />
                        </apex:pageBlockSection>
                    </apex:outputPanel>
                    
                    <apex:outputPanel layout="block" rendered="{!NOT(ISNew)}">
						<apex:pageBlockSection title="{!DialogueLocalisations['TitleSubtitleSystemInformation']}" columns="2" collapsible="false">
                            <apex:outputField label="{!GlobalLocalisations['FieldLabelCreatedBy']}" value="{!ianb__Notice__c.CreatedById}" />
                            <apex:outputField label="{!GlobalLocalisations['FieldLabelCreatedDate']}" value="{!ianb__Notice__c.CreatedDate}" />
                            
                            <apex:pageBlockSectionItem >
                                <apex:outputLabel value="{!GlobalLocalisations['FieldLabelOwner']}" for="txtOwner" />
                                <apex:outputPanel >
                                    <apex:outputLink id="txtOwner" value="/{!ianb__Notice__c.Owner.Id}">{!ianb__Notice__c.Owner.Name}</apex:outputLink>
                                    &nbsp;
                                    <apex:outputLink value="/{!ianb__Notice__c.Id}/a?retURL=/apex/NoticeEdit%3Fid={!ianb__Notice__c.Id}">{!GlobalLocalisations['ButtonChangeOwner']}</apex:outputLink>
                                </apex:outputPanel>
                            </apex:pageBlockSectionItem>

                            <apex:inputField value="{!ianb__Notice__c.ianb__UpdatesPending__c}" rendered="{!showDiagnostics}" />

                        </apex:pageBlockSection>        
                    </apex:outputPanel>
                    
                </apex:pageBlock>
            </apex:form>
        </apex:tab>


<!--   
===============================================
SELECT RECIPIENTS TAB
===============================================
 -->            
        <apex:tab label="{!DialogueLocalisations['TitleSubtitleTabSelectRecipients']}" name="SelectRecipients" id="tabSelectRecipients" ontabenter="tab_ontabenter('SelectRecipients');"
            ontableave="onLeaveRecipientsTab();" disabled="{!IsNew}">
            <apex:form id="frmSelectRecipients">

    <!--
    -----------------------------------------------
	Hidden fields used for marshalling recipient groupings and definitions changes etc. 
	Can be shown by passing parameter "ShowNBSettings" 
    -----------------------------------------------
     -->                                            
			<div id='Diags' style="display: {!IF(showDiagnostics, 'block', 'none')};">
				<table>
					<tr>
						<td>!UpdatedRecipientList</td>
						<td><apex:inputText value="{!UpdatedRecipientList}" id="hdnUpdateRecipientList" style="width: 1000px;"/></td>
					</tr>
			
					<tr>
						<td>!SelectMode</td>
						<td><apex:inputText value="{!SelectMode}" id="hdnSelectMode" /></td>
					</tr>
			
					<tr>
						<td>!UsersOptions</td>
						<td><apex:inputText value="{!UsersOptions}" id="hdnUsersOptions" style="width: 1000px;" /></td>
					</tr>
			
					<tr>
						<td>!SelectedUser</td>
						<td><apex:inputText value="{!SelectedUser}" id="hdnSelectedUser" style="width: 1000px;" /></td>
					</tr>
			
					<tr>
						<td>!AddedRecipientsFromLists</td>
						<td><apex:inputText value="{!AddedRecipientsFromLists}" id="hdnAddedRecipientsFromLists" style="width: 1000px;" /></td>
					</tr>
			
					<tr>
						<td>RecipientGroupMembers</td>
						<td><apex:inputText value="{!RecipientGroupMembers}" id="hdnRecipientGroupMembers" style="width: 1000px;"/></td>
					</tr>
			
					<tr>
						<td>RecipientListDefinition</td>
						<td><apex:inputText value="{!ianb__Notice__c.ianb__RecipientListDefinition__c}" id="hdnListDef" style="width: 1000px;" /></td>
					</tr>
			
					<tr>
						<td>hdnAllRec</td>
						<td><input id="hdnAllRec" type="text" value="{!HTMLENCODE(Recipients)}" style="width: 1000px;"/></td>
					</tr>

					<tr>
						<td>Diags</td>
						<td>{!Diags}</td>
					</tr>
				</table>
			</div>
   
            <input type="hidden" value="false" id="hidChanged" />   

			<apex:actionFunction status="statusGroup" reRender="Step1Warning,outGroup,outNoUsers,outUsers,outSecond,hdnUsersOptions" name="updateGroupListAction" action="{!UpdateGroupList}" oncomplete="stopDisplayUsers();" />
			<apex:actionFunction reRender="outNoUsers,outUsers,outSecond,outSelectSource,hdnUsersOptions,outPaging" name="updateUserListAction" action="{!UpdateUserList}" oncomplete="stopDisplayUsers();" />
            <apex:actionFunction status="statusGroup" reRender="outNoUsers,outUsers,outSecond,outSelectSource,outGroup,hdnUsersOptions" name="searchUserAction" action="{!SearchUser}" oncomplete="stopDisplayUsers();" />
            <apex:actionFunction status="statusGroup" reRender="outGroup" name="fillUserGroupsAction" action="{!FillUserGroups}" />
            <apex:actionFunction name="saveRecipientsAction" action="{!SaveRecipients}" reRender="outAllRecipients" oncomplete="unblockUI();" />
			<apex:actionFunction name="changeSelectMode" reRender="outStep2,outStep2B,outStep3,Step2CountLabels,Step3CountLabels" />
    
    
            <apex:outputPanel id="outAllRecipients">

	            <apex:pageBlock id="pbSelectRecipients" title="{!DialogueLocalisations['TitleSubtitleSelectRecipients']}" rendered="{!NOT(IsSaveRecipientGroupMode)}">
	                <apex:pageBlockButtons location="top" >
	                    <apex:commandButton value="{!GlobalLocalisations['ButtonSave']}" disabled="{!UpdatesPending}" onclick="saveRecipients();return false;" />                   
	                    <apex:commandButton value="{!GlobalLocalisations['ButtonCancel']}" action="{!CancelNotice}" immediate="true" />

    <!--
    -----------------------------------------------------
    Apex Jobs (Recipient updates) Pending warning + Diags
    -----------------------------------------------------
     -->  
						<div class="UpdatesPendingWarning" style="display: {!IF(UpdatesPending == true, 'block', 'none')};">
							<apex:outputText value="{!GlobalLocalisations['AdviceLabelUpdatesPending']}" />
						</div>

						<div style="display: {!IF(Diags == '', 'none', 'block')}; color: red; padding: 5px 0 0 4px;">	                    
							{!Diags}	                    
						</div>
	                </apex:pageBlockButtons>
	
	    <!--
	    -----------------------------------------------
	    Selection mode radio button
	    -----------------------------------------------
	     -->                                            
	                <table>                
	                    <tr>
	                        <td colspan="2">
	                            <apex:outputlabel value="{!DialogueLocalisations['AdviceLabelSelectionMode']}" />&nbsp;
	                            <input type="radio" id="inpUser" name="selectMode" onclick="return selectMode_click('User');" />
	                            <label for="inpUser">{!DialogueLocalisations['AdviceLabelSelectionModeIndividual']}</label>&nbsp;
	                            
	                            <input type="radio" id="inpList" name="selectMode" onclick="return selectMode_click('List');" />
	                            <label for="inpList">{!DialogueLocalisations['AdviceLabelSelectionModeLists']}</label>
	                        </td>
	                        
							<td colspan="2">
								{!DialogueLocalisations['FieldLabelRecipientScope']} &nbsp;
							
								<apex:selectList id="slScope" size="1" value="{!RecipientScope}" onchange="startDisplayGroups();">
									<apex:selectOption itemValue="All" itemLabel="{!DialogueLocalisations['ValueAll']}" />
									<apex:selectOption itemValue="External" itemLabel="{!DialogueLocalisations['ValueExternalOnly']}" />
									<apex:selectOption itemValue="Internal" itemLabel="{!DialogueLocalisations['ValueInternalOnly']}" />
								</apex:selectList>
							</td>	                        
	                    </tr>

	    <!--
	    -----------------------------------------------
	    Step 1 - 3 Headings and List selector
	    -----------------------------------------------
	     -->                                            
	                    <tr>	                    
	                        <td width="33%">
	                            <p>{!DialogueLocalisations['AdviceLabelStep1']}</p>
	                            <apex:outputPanel id="outSelectSource">
	                                <apex:selectList id="slSource" size="1" value="{!GroupListSource}" onchange="startDisplayGroups();">
	                                    <apex:selectOption itemValue="1" itemLabel="Profiles"/>
	                                    <apex:selectOption itemValue="3" itemLabel="Public Groups"/>
	                                    <apex:selectOption itemValue="2" itemLabel="Roles"/>
	                                    <apex:selectOption itemValue="4" itemLabel="Role and Subordinates"/>
	                                    <apex:selectOption itemValue="5" itemLabel="Search Results" rendered="{!IsUserMode}"/>
	                                    <apex:selectOption itemValue="6" itemLabel="Recipient Groups" rendered="{!IsUserMode}"/>
	                                </apex:selectList><br/>
	                            </apex:outputPanel>
	                        </td>
	
	                        <td>
	                            <apex:outputPanel id="outStep2">
	                            	<p>
	                            		{!DialogueLocalisations['AdviceLabelStep2']} {!IF(SelectMode == "User", DialogueLocalisations['AdviceLabelStep2ModeIndividual'], DialogueLocalisations['AdviceLabelStep2ModeLists'])}
	                            	</p>
	                            </apex:outputPanel>
	                            <apex:outputPanel id="outStep2B">
	                            	<div style="height:20px;">
	                            		<!-- 
										{!IF(SelectMode == "User", "", DialogueLocalisations['AdviceLabelNumbersTotalExternal'])}
	                            		 -->
	                            	</div>
	                            </apex:outputPanel>
	                        </td>
	
	                        <td>&nbsp;</td>
	
	                        <td>
	                            <apex:outputPanel id="outStep3">
	                            	<p>
	                            		{!DialogueLocalisations['AdviceLabelStep3']} {!IF(SelectMode == "User", DialogueLocalisations['AdviceLabelStep3ModeIndividual'], DialogueLocalisations['AdviceLabelStep3ModeLists'])}
	                            	</p>
	                            </apex:outputPanel>
	                        </td>
	                    </tr>
	                    
	    <!--
	    -----------------------------------------------
	    Listings row
	    -----------------------------------------------
	     -->                                                  
	                    <tr>
		   	<!-- Step 1 set of available lists of type selected in list selector (above) -->                     
	                        <td>
	                            <apex:outputPanel id="outGroup">
	                                <apex:actionStatus id="statusGroup">
	                                   <apex:facet name="start">
	                                        <select style="width:210px;height:174px;background:no-repeat center center url({!URLFOR($Resource.noticeboard_resources, 'noticeboard_resources/images/loading.gif')})" size="9" >
	                                        </select>
	                                    </apex:facet>
	                                    <apex:facet name="stop">
											<apex:selectList id="slGroups" style="min-width:210px;height:174px;" size="9" value="{!SelectedGroup}" onchange="Step2Reset();" >
	                                            <apex:selectOptions value="{!Groups}"/>
	                                        </apex:selectList>
	                                    </apex:facet>                               
	                                </apex:actionStatus>
	                            </apex:outputPanel>
	
	                            <apex:outputPanel id="Step1Warning">
	                            	<div class="NBWarning" style="display: {!IF(ShowStep1Warning, 'block', 'none')};">
										{!DialogueLocalisations['AdviceLabelStep1Warning']}
	                            	</div>
	                            </apex:outputPanel>
	                        </td>
	                        
	                        
	       	<!-- Step 2 set of users available in selected list -->                         
	                        <td>
	                            <div id="divStart" style="display:none;">
	                                <table style="height:174px;">
	                                    <tr>
	                                        <td style="width: 203px; text-align: center; border:1px solid #aaaaaa; vertical-align: middle;">
	                                            <img src="{!URLFOR($Resource.noticeboard_resources, 'noticeboard_resources/images/loading.gif')}" />
	                                        </td>
	                                    </tr>
	                                </table>
	                            </div>
	                            <div id="divStop">
	                                <apex:outputPanel id="outSecond" layout="block"> 
	                                    <apex:outputPanel id="outNoUsers" layout="none" rendered="{!IsGroupEmpty}">
	                                        <table style="height:174px;">
	                                            <tr>
			                                        <td style="width: 203px; text-align: center; border:1px solid #aaaaaa; vertical-align: middle;">
														&lt;{!DialogueLocalisations['AdviceLabelNoMatchingUsers']}&gt;
													</td>
	                                            </tr>
	                                        </table>
	                                    </apex:outputPanel>
	                                    <apex:outputPanel id="outUsers" layout="none" rendered="{!NOT(IsGroupEmpty)}">
											<select style="min-width:210px;height:174px;" id="slAllUsers" size="10" multiple="multiple" onblur="preventStep3Overload();" onclick="slAllUsersChange();" onchange="updateSelectedCount();" >
	                                        </select>

	                                    </apex:outputPanel>
	                                </apex:outputPanel>
	                            </div>
	                             
	                        </td>
	
		    <!-- Add / Remove recipient buttons --> 
	                        <td style="vertical-align:middle;text-align:center;" width="75px;">
								<apex:commandButton id="btnAddUsers" value="{!GlobalLocalisations['ButtonAdd']} >" onclick="addUsers();return false;" disabled="{!IsSelectionRecipientsDisabled}" style="width:65px;"/>
								<apex:commandButton id="btnRemoveUsers" value="< {!GlobalLocalisations['ButtonRemove']}" onclick="removeUsers();return false;" disabled="{!IsSelectionRecipientsDisabled}" style="width:65px;"/>
	                        </td>
	                        
	                        
			<!-- Step 3 list of users chosen as Recipients --> 
	                        <td>
								<select style="min-width:210px;height:174px;" id="slRecipients" size="10" multiple="multiple">
	                            </select>
	                        </td>
	                    </tr>

	    <!--
	    -----------------------------------------------
	    Step 2 Paging Controls
	    -----------------------------------------------
	     -->                                            
						<tr>
							<td>
							</td>
							
							<td>
								<apex:outputPanel id="outPaging">
									<input type="button" value="{!GlobalLocalisations['ButtonPrevious']}" onclick="PagePrev2();" style="width:90px;"/> 
									<apex:selectList size="1" id="pageSize2" value="{!pagingPageSize2}" style="margin-left: 4px;" onchange="recordPageSize();" >
										<apex:selectOption itemValue="25" itemLabel="25" />
										<apex:selectOption itemValue="50" itemLabel="50" />
										<apex:selectOption itemValue="100" itemLabel="100" />
										<apex:selectOption itemValue="500" itemLabel="500" />
										<apex:selectOption itemValue="1000" itemLabel="1000" />
									</apex:selectList>
									<input type="button" value="{!GlobalLocalisations['ButtonNext']}" onclick="PageNext2();" style="width:90px;"/> 
								
									<div style="display: {!IF(showDiagnostics, 'block', 'none')};">
										<br/>Min2:  <apex:inputText id="pageMin2" value="{!pagingMinValue2}" />
										<br/>Max2:  <apex:inputText id="pageMax2" value="{!pagingMaxValue2}" />
										<br/>Dir2:  <apex:inputText id="pageDir2" value="{!pagingDirection2}" />
										<br/>{!Diags}
									</div>
								</apex:outputPanel>
 
								<script>
							
									///////////////////////////////////////////////////////
									// Paging logic
									///////////////////////////////////////////////////////
							
									// Default paging values - e.g., on changing Step 1 selection
									function Step2Reset() {
										var txtMin = document.getElementById('{!$Component.pageMin2}');
										txtMin.value = '';			
							
										var txtMax = document.getElementById('{!$Component.pageMax2}');
										txtMax.value = '';			
									
										var txtDir = document.getElementById('{!$Component.pageDir2}');
										txtDir.value = 'NEXT';			
										
										startDisplayUsers();
									}
									
									// Page backwards
									function PagePrev2() {
										var txtDir = document.getElementById('{!$Component.pageDir2}');
										txtDir.value = 'PREVIOUS';			
										startDisplayUsers();
									}
									
									// Page forwards
									function PageNext2() {  
										var txtDir = document.getElementById('{!$Component.pageDir2}');
										txtDir.value = 'NEXT';			
										startDisplayUsers();
									}
									
									// Store selected paging size in a cookie
									function recordPageSize() {
										var txtPS = document.getElementById('{!$Component.pageSize2}').value;
							            var expire = new Date();
							            expire.setTime(expire.getTime() + 60000*20);
							            setCookiePlain('apex__PageSize2', txtPS, expire);			
									}
							
								</script>
							</td>
							
							<td></td>
							<td></td>
						</tr>

	    <!--
	    -----------------------------------------------------------------------------------
	    Step 3 limit warnings, and (User mode only) recipient count + Create Group checkbox 
	    -----------------------------------------------------------------------------------
	     -->                                            
						<tr>
							<td></td>
							<td>
								<apex:outputPanel id="Step2CountLabels">
									<div style="">
			                            <div style="display: {!IF(SelectMode=='User', 'block', 'none')}; padding: 3px 0 3px 0;"><label id="lblSelectedCount"></label></div>
										<div id='maxStep3Warning' style='display: none; color: red; width: 235px;'>{!DialogueLocalisations['AdviceLabelStep3LimitWarning']}</div>										
									</div>
								</apex:outputPanel>                            
							</td>
	
							<td></td>	
							<td>
								<apex:outputPanel id="Step3CountLabels">
									<div style="">
			                            <div style="display: {!IF(SelectMode=='User', 'block', 'none')};"><label id="lblRecipientsCount"></label></div>
			                            <div style="display: {!IF(SelectMode=='User', 'block', 'none')};"><label id="lblExternalUsersCount"></label></div>
										<div id="NumbersTBA" style="width: 210px; display: {!IF(SelectMode=='User', 'none', 'block')};"><label>{!DialogueLocalisations['AdviceLabelNumbersTBA']}</label></div>
										<div id='maxStep3Reached' style='display: none; color: red; width: 235px;'>{!DialogueLocalisations['AdviceLabelStep3LimitReached']}</div>
									</div>

		                 			<br/>
	
		                            <apex:inputCheckBox id="chkCreateRecipientGroup" value="{!IsRecipientGroup}" rendered="{!SelectMode=='User'}" />
		                            <apex:outputLabel value="{!DialogueLocalisations['FieldLabelCreateRecipientGroup']}" for="chkCreateRecipientGroup" rendered="{!SelectMode=='User'}" />
								</apex:outputPanel>                            
							</td>
						</tr>
	                 
	    <!--
	    -----------------------------------------------
	    Search tools
	    -----------------------------------------------
	     -->                                            
	                    <tr>
	                        <td>
	                            <div id="divSearch" style="min-width: 300px;">
	                                <apex:outputLabel for="txtSearchString" id="lblSearch" value="{!DialogueLocalisations['AdviceLabelSearchUser']}" /><br />
	                                <apex:inputText id="txtSearchString" value="{!SearchString}" />
	                                <input id="btnSearch" type="button" value="{!DialogueLocalisations['ButtonSearch']}" class="btnDisabled" disabled="disabled" onclick="startSearchUser();" />
	                                <input id="btnReset" type="button" value="{!DialogueLocalisations['ButtonReset']}" class="btn" onclick="resetSearch();" />
	                            </div>
	                        </td>
	                        
	                        <td>
	                        </td>
	                        <td style="vertical-align:middle;text-align:center;" width="75px;">
	                        </td>
	                        <td>
	                        </td>
	
	                    </tr>
	                    
	                </table>
	            </apex:pageBlock>
	            
	    <!--
	    -----------------------------------------------
	    Save Recipient Group UI (when create RG was ticked)
	    -----------------------------------------------
	     -->               
				<apex:pageBlock id="pbSaveGroup" title="{!DialogueLocalisations['TitleSubtitleSaveRecipientGroup']}" rendered="{!IsSaveRecipientGroupMode}"> 
	
	                <apex:pageBlockButtons id="blkbtnsSave" location="top" >
	                    <apex:commandButton value="{!GlobalLocalisations['ButtonSave']}" action="{!SaveGroup}" id="btnSaveRG" styleClass="btnDisabled" disabled="disabled" />                   
	                    <apex:commandButton value="{!GlobalLocalisations['ButtonCancel']}" action="{!CancelGroup}" immediate="true" />
	                </apex:pageBlockButtons>
	                <table style="margin: 7px 12px;">
	                	<tr>
							<td colspan='2'><b>{!DialogueLocalisations['FieldLabelSaveGroupAs']}</b></td>
	                	</tr>
	                    <tr>
	                        <td>
								<apex:outputLabel for="txtGroupName" value="{!DialogueLocalisations['AdviceLabelEitherOrEnterName']}" />
	                        </td>
	                        <td>
	                            <apex:inputText id="txtGroupName" value="{!GroupName}" style="width:210px;" onclick="javascript:validateRGName(this);" onchange="javascript:validateRGName(this);" />
	                        </td>
	                    </tr>
	                    <tr>
							<td><div style="width: 215px;">{!DialogueLocalisations['AdviceLabelEitherOrSelectExisting']}</div></td>
	                        <td>
	                            <apex:selectList id="slRecipientGroups" size="10" style="width:215px;" onfocus="RecipientGroupsSelect();" onchange="RecipientGroupsSelect();" >
	                                <apex:selectOptions value="{!RecipientGroups}" />
	                            </apex:selectList>
	                        </td>
	                    </tr>
	                </table>
	                
	            </apex:pageBlock>

            </apex:outputPanel>		<!-- outAllRecipients -->            
            
            </apex:form>
        </apex:tab>
    

<!--   
===============================================
NOTICE APPROVAL TAB
===============================================
 -->            

        <apex:tab label="{!DialogueLocalisations['TitleSubtitleTabNoticeApproval']}" name="Approval Processes" id="tabApprovalProcesses" ontabenter="tab_ontabenter('Approval Processes');" disabled="{!IsApprovalDisabled}" rendered="{!IsApprovalRequired}">
            <apex:relatedList list="ProcessSteps" ></apex:relatedList>
        </apex:tab>
                                

<!--   
===============================================
NOTICE STATUS TAB
===============================================
 -->            
        <apex:tab label="{!DialogueLocalisations['TitleSubtitleTabNoticeStatus']}" name="MonitorProgress" id="tabMonitorProgress" ontabenter="tab_ontabenter('MonitorProgress');" disabled="{!IsNew}">
            <apex:form >
				<apex:pageBlock title="{!DialogueLocalisations['TitleSubtitleTabNoticeStatus']}" mode="edit">
	                <apex:pageBlockSection columns="2" collapsible="false" showHeader="false" >
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelNoticeStatus']}" value="{!ianb__Notice__c.ianb__NoticeStatus__c}" />
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumSelectedRecipients']}" value="{!ianb__Notice__c.ianb__SelectedRecipients__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelApprovalStatus']}" value="{!ianb__Notice__c.ianb__ApprovalStatus__c}"/>
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumIssued']}" value="{!ianb__Notice__c.ianb__IssuedNotifications__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelApprovalRequestSubmittedDate']}" value="{!ianb__Notice__c.ianb__ApprovalRequestSubmittedDate__c}" />
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumDisplayed']}" value="{!ianb__Notice__c.ianb__DisplayedNotifications__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelRejectedDate']}" value="{!ianb__Notice__c.ianb__RejectedDate__c}"/>
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumOpened']}" value="{!ianb__Notice__c.ianb__OpenedNotifications__c}" />
	                                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelApprovedDate']}" value="{!ianb__Notice__c.ianb__ApprovedDate__c}" />
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumAcknowledged']}" value="{!ianb__Notice__c.ianb__AcknowledgedNotifications__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelAutoPublishDate']}" value="{!ianb__Notice__c.ianb__AutoPublishDate__c}" />
						<apex:outputField label="{!DialogueLocalisations['FieldLabelStatisticsRefreshed']}" value="{!ianb__Notice__c.ianb__NotificationStatisticsRefreshed__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelPublishedDate']}" value="{!ianb__Notice__c.ianb__PublishedDate__c}"/>
	                    <apex:pageBlockSectionItem >
	                        <apex:outputText />
	                        <apex:outputPanel >
								<a title="{!DialogueLocalisations['TipButtonAnalyseStatus']}" href="/00OU0000001PEfl?drillcol=FK_CUSTENT_ID&drillval={!URLENCODE(LEFT(Notice__c.Id, 15))}&drilldown=1">
									{!DialogueLocalisations['ButtonAnalyseStatus']}
								</a> 
	                        </apex:outputPanel> 
	                    </apex:pageBlockSectionItem>
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelAutoSuspendDate']}" value="{!ianb__Notice__c.ianb__AutoSuspendDate__c}"/>
	                    <apex:outputText />                 
	     
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelSuspendedDate']}" value="{!ianb__Notice__c.ianb__SuspendedDate__c}"/>
						<apex:outputText rendered="{!ianb__Notice__c.ianb__AcknowledgedAndFlaggedNotifications__c == 0}" /> 
						<apex:outputField label="{!DialogueLocalisations['FieldLabelNumAcknowledgedFlagged']}" rendered="{!ianb__Notice__c.ianb__AcknowledgedAndFlaggedNotifications__c != 0}" value="{!ianb__Notice__c.ianb__AcknowledgedAndFlaggedNotifications__c}" />
	                    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelClosedDate']}" value="{!ianb__Notice__c.ianb__ClosedDate__c}"/>
	                    <apex:outputText />                 
	    
	                    <apex:outputField label="{!DialogueLocalisations['FieldLabelVoidReason']}" value="{!ianb__Notice__c.ianb__VoidReason__c}"/>
	                    <apex:outputText />                 
	                </apex:pageBlockSection>
	            </apex:pageBlock>
            </apex:form>
        </apex:tab>     
    </apex:tabPanel>           


</apex:page>